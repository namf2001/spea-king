// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                   String                @id @default(cuid())
  name                 String?
  email                String?               @unique
  emailVerified        DateTime?             @map("email_verified")
  image                String?
  role                 Role                  @default(USER)
  accounts             Account[]
  sessions             Session[]
  pronunciationLessons PronunciationLesson[]
  reflexQuestions      ReflexQuestion[]
  speakingRecords      UserSpeakingRecord[]
  conversationTopics   ConversationTopic[]
  vocabularyExercises  VocabularyExercise[]
  exerciseResults      ExerciseResult[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model PronunciationLesson {
  id        String                    @id @default(cuid())
  title     String
  userId    String
  user      User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  words     PronunciationLessonWord[]
  createdAt DateTime                  @default(now()) @map("created_at")
  updatedAt DateTime                  @updatedAt @map("updated_at")

  @@map("pronunciation_lessons")
}

model PronunciationWord {
  id        String                    @id @default(cuid())
  word      String                    @unique
  lessons   PronunciationLessonWord[]
  createdAt DateTime                  @default(now()) @map("created_at")
  updatedAt DateTime                  @updatedAt @map("updated_at")

  @@index([word])
  @@map("pronunciation_words")
}

model PronunciationLessonWord {
  id       String              @id @default(cuid())
  lessonId String
  wordId   String
  lesson   PronunciationLesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  word     PronunciationWord   @relation(fields: [wordId], references: [id], onDelete: Cascade)

  @@unique([lessonId, wordId])
  @@map("pronunciation_lesson_words")
}

model ReflexQuestion {
  id              String               @id @default(cuid())
  question        String
  answer          String               @db.Text
  userId          String
  user            User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  speakingRecords UserSpeakingRecord[]
  createdAt       DateTime             @default(now()) @map("created_at")
  updatedAt       DateTime             @updatedAt @map("updated_at")

  @@map("reflex_questions")
}

model UserSpeakingRecord {
  id                  String             @id @default(cuid())
  userId              String
  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversationTopicId String?
  conversationTopic   ConversationTopic? @relation(fields: [conversationTopicId], references: [id], onDelete: SetNull)
  reflexQuestionId    String?
  reflexQuestion      ReflexQuestion?    @relation(fields: [reflexQuestionId], references: [id], onDelete: SetNull)
  duration            Int                @default(0) // Duration in seconds
  createdAt           DateTime           @default(now()) @map("created_at")

  @@map("user_speaking_records")
}

model ConversationTopic {
  id              String               @id @default(cuid())
  title           String
  description     String?
  speakingRecords UserSpeakingRecord[]
  userId          String
  user            User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime             @default(now()) @map("created_at")
  updatedAt       DateTime             @updatedAt @map("updated_at")

  @@map("conversation_topics")
}

model VocabularyExercise {
  id          String            @id @default(cuid())
  title       String
  description String?
  userId      String
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  pairs       VocabularyPair[]
  results     ExerciseResult[]
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")

  @@map("vocabulary_exercises")
}

model VocabularyPair {
  id         String             @id @default(cuid())
  englishWord String
  vietnameseWord String
  exerciseId String
  exercise   VocabularyExercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  createdAt  DateTime           @default(now()) @map("created_at")

  @@map("vocabulary_pairs")
}

model ExerciseResult {
  id         String             @id @default(cuid())
  userId     String
  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  exerciseId String
  exercise   VocabularyExercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  score      Int                // Score percentage (0-100)
  timeSpent  Int                // Time in seconds
  attempts   Int                @default(1)
  completedAt DateTime          @default(now()) @map("completed_at")

  @@map("exercise_results")
}

enum Role {
  USER
  ADMIN
}
