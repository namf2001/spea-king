// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String?              @unique
  emailVerified      DateTime?            @map("email_verified")
  image              String?
  role               Role                 @default(USER)
  accounts           Account[]
  sessions           Session[]
  pronunciationLessons PronunciationLesson[]
  communicationTopics CommunicationTopic[]
  reflexQuestions    ReflexQuestion[]
  speakingRecords    UserSpeakingRecord[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model PronunciationLesson {
  id        String         @id @default(cuid())
  title     String
  userId    String
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  words     PronunciationWord[]
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")

  @@map("pronunciation_lessons")
}

model PronunciationWord {
  id        String             @id @default(cuid())
  word      String
  lessonId  String
  lesson    PronunciationLesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  createdAt DateTime           @default(now()) @map("created_at")
  updatedAt DateTime           @updatedAt @map("updated_at")
  @@unique([word, lessonId])
  @@index([word])
  
  @@map("pronunciation_words")
}

model CommunicationTopic {
  id        String             @id @default(cuid())
  title     String
  userId    String
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  speakingRecords UserSpeakingRecord[]
  createdAt DateTime           @default(now()) @map("created_at")
  updatedAt DateTime           @updatedAt @map("updated_at")

  @@map("communication_topics")
}

model ReflexQuestion {
  id        String             @id @default(cuid())
  question  String
  userId    String
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  speakingRecords UserSpeakingRecord[]
  createdAt DateTime           @default(now()) @map("created_at")
  updatedAt DateTime           @updatedAt @map("updated_at")

  @@map("reflex_questions")
}

model UserSpeakingRecord {
  id                  String             @id @default(cuid())
  userId              String
  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  communicationTopicId String?
  communicationTopic  CommunicationTopic? @relation(fields: [communicationTopicId], references: [id], onDelete: SetNull)
  reflexQuestionId    String?
  reflexQuestion      ReflexQuestion?    @relation(fields: [reflexQuestionId], references: [id], onDelete: SetNull)
  duration            Int                @default(0) // Duration in seconds
  createdAt           DateTime           @default(now()) @map("created_at")

  @@map("user_speaking_records")
}

enum Role {
  USER
  ADMIN
}
