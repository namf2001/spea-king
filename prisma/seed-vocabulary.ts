import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// Data vocabulary exercises cho test
const vocabularyExercisesData = [
  {
    title: 'T·ª´ v·ª±ng c∆° b·∫£n h√†ng ng√†y',
    description: 'H·ªçc c√°c t·ª´ v·ª±ng ti·∫øng Anh c∆° b·∫£n th∆∞·ªùng d√πng trong cu·ªôc s·ªëng h√†ng ng√†y',
    pairs: [
      { englishWord: 'hello', vietnameseWord: 'xin ch√†o' },
      { englishWord: 'goodbye', vietnameseWord: 't·∫°m bi·ªát' },
      { englishWord: 'thank you', vietnameseWord: 'c·∫£m ∆°n' },
      { englishWord: 'please', vietnameseWord: 'l√†m ∆°n' },
      { englishWord: 'sorry', vietnameseWord: 'xin l·ªói' },
      { englishWord: 'excuse me', vietnameseWord: 'xin l·ªói/cho ph√©p' },
      { englishWord: 'water', vietnameseWord: 'n∆∞·ªõc' },
      { englishWord: 'food', vietnameseWord: 'th·ª©c ƒÉn' },
      { englishWord: 'house', vietnameseWord: 'nh√†' },
      { englishWord: 'school', vietnameseWord: 'tr∆∞·ªùng h·ªçc' },
    ],
  },
  {
    title: 'Gia ƒë√¨nh v√† ng∆∞·ªùi th√¢n',
    description: 'T·ª´ v·ª±ng v·ªÅ c√°c th√†nh vi√™n trong gia ƒë√¨nh v√† m·ªëi quan h·ªá',
    pairs: [
      { englishWord: 'family', vietnameseWord: 'gia ƒë√¨nh' },
      { englishWord: 'father', vietnameseWord: 'b·ªë/cha' },
      { englishWord: 'mother', vietnameseWord: 'm·∫π/m·∫π' },
      { englishWord: 'brother', vietnameseWord: 'anh/em trai' },
      { englishWord: 'sister', vietnameseWord: 'ch·ªã/em g√°i' },
      { englishWord: 'grandfather', vietnameseWord: '√¥ng n·ªôi/ngo·∫°i' },
      { englishWord: 'grandmother', vietnameseWord: 'b√† n·ªôi/ngo·∫°i' },
      { englishWord: 'uncle', vietnameseWord: 'ch√∫/b√°c/c·∫≠u' },
      { englishWord: 'aunt', vietnameseWord: 'c√¥/d√¨/th√≠m' },
      { englishWord: 'cousin', vietnameseWord: 'anh/ch·ªã/em h·ªç' },
    ],
  },
  {
    title: 'M√†u s·∫Øc c∆° b·∫£n',
    description: 'H·ªçc c√°c t·ª´ v·ª±ng v·ªÅ m√†u s·∫Øc th∆∞·ªùng g·∫∑p',
    pairs: [
      { englishWord: 'red', vietnameseWord: 'm√†u ƒë·ªè' },
      { englishWord: 'blue', vietnameseWord: 'm√†u xanh d∆∞∆°ng' },
      { englishWord: 'green', vietnameseWord: 'm√†u xanh l√°' },
      { englishWord: 'yellow', vietnameseWord: 'm√†u v√†ng' },
      { englishWord: 'orange', vietnameseWord: 'm√†u cam' },
      { englishWord: 'purple', vietnameseWord: 'm√†u t√≠m' },
      { englishWord: 'pink', vietnameseWord: 'm√†u h·ªìng' },
      { englishWord: 'brown', vietnameseWord: 'm√†u n√¢u' },
      { englishWord: 'black', vietnameseWord: 'm√†u ƒëen' },
      { englishWord: 'white', vietnameseWord: 'm√†u tr·∫Øng' },
    ],
  },
  {
    title: 'S·ªë ƒë·∫øm t·ª´ 1-20',
    description: 'H·ªçc c√°ch ƒë·∫øm s·ªë t·ª´ 1 ƒë·∫øn 20 trong ti·∫øng Anh',
    pairs: [
      { englishWord: 'one', vietnameseWord: 'm·ªôt' },
      { englishWord: 'two', vietnameseWord: 'hai' },
      { englishWord: 'three', vietnameseWord: 'ba' },
      { englishWord: 'four', vietnameseWord: 'b·ªën' },
      { englishWord: 'five', vietnameseWord: 'nƒÉm' },
      { englishWord: 'six', vietnameseWord: 's√°u' },
      { englishWord: 'seven', vietnameseWord: 'b·∫£y' },
      { englishWord: 'eight', vietnameseWord: 't√°m' },
      { englishWord: 'nine', vietnameseWord: 'ch√≠n' },
      { englishWord: 'ten', vietnameseWord: 'm∆∞·ªùi' },
    ],
  },
  {
    title: 'Th·ª©c ƒÉn v√† ƒë·ªì u·ªëng',
    description: 'T·ª´ v·ª±ng v·ªÅ c√°c lo·∫°i th·ª©c ƒÉn v√† ƒë·ªì u·ªëng ph·ªï bi·∫øn',
    pairs: [
      { englishWord: 'rice', vietnameseWord: 'c∆°m/g·∫°o' },
      { englishWord: 'bread', vietnameseWord: 'b√°nh m√¨' },
      { englishWord: 'meat', vietnameseWord: 'th·ªãt' },
      { englishWord: 'fish', vietnameseWord: 'c√°' },
      { englishWord: 'chicken', vietnameseWord: 'g√†' },
      { englishWord: 'egg', vietnameseWord: 'tr·ª©ng' },
      { englishWord: 'milk', vietnameseWord: 's·ªØa' },
      { englishWord: 'coffee', vietnameseWord: 'c√† ph√™' },
      { englishWord: 'tea', vietnameseWord: 'tr√†' },
      { englishWord: 'fruit', vietnameseWord: 'tr√°i c√¢y' },
    ],
  },
  {
    title: 'ƒê·ªông v·∫≠t quen thu·ªôc',
    description: 'H·ªçc t·ª´ v·ª±ng v·ªÅ c√°c lo√†i ƒë·ªông v·∫≠t th∆∞·ªùng g·∫∑p',
    pairs: [
      { englishWord: 'dog', vietnameseWord: 'ch√≥' },
      { englishWord: 'cat', vietnameseWord: 'm√®o' },
      { englishWord: 'bird', vietnameseWord: 'chim' },
      { englishWord: 'fish', vietnameseWord: 'c√°' },
      { englishWord: 'cow', vietnameseWord: 'b√≤' },
      { englishWord: 'pig', vietnameseWord: 'heo/l·ª£n' },
      { englishWord: 'chicken', vietnameseWord: 'g√†' },
      { englishWord: 'duck', vietnameseWord: 'v·ªãt' },
      { englishWord: 'rabbit', vietnameseWord: 'th·ªè' },
      { englishWord: 'horse', vietnameseWord: 'ng·ª±a' },
    ],
  },
  {
    title: 'Qu·∫ßn √°o v√† ph·ª• ki·ªán',
    description: 'T·ª´ v·ª±ng v·ªÅ trang ph·ª•c v√† ph·ª• ki·ªán th·ªùi trang',
    pairs: [
      { englishWord: 'shirt', vietnameseWord: '√°o s∆° mi' },
      { englishWord: 'pants', vietnameseWord: 'qu·∫ßn d√†i' },
      { englishWord: 'dress', vietnameseWord: 'v√°y/ƒë·∫ßm' },
      { englishWord: 'shoes', vietnameseWord: 'gi√†y' },
      { englishWord: 'hat', vietnameseWord: 'm≈©' },
      { englishWord: 'jacket', vietnameseWord: '√°o kho√°c' },
      { englishWord: 'socks', vietnameseWord: 't·∫•t' },
      { englishWord: 'bag', vietnameseWord: 't√∫i x√°ch' },
      { englishWord: 'watch', vietnameseWord: 'ƒë·ªìng h·ªì ƒëeo tay' },
      { englishWord: 'glasses', vietnameseWord: 'k√≠nh m·∫Øt' },
    ],
  },
  {
    title: 'Ph√≤ng trong nh√†',
    description: 'H·ªçc t√™n c√°c ph√≤ng v√† khu v·ª±c trong ng√¥i nh√†',
    pairs: [
      { englishWord: 'kitchen', vietnameseWord: 'nh√† b·∫øp' },
      { englishWord: 'bedroom', vietnameseWord: 'ph√≤ng ng·ªß' },
      { englishWord: 'bathroom', vietnameseWord: 'ph√≤ng t·∫Øm' },
      { englishWord: 'living room', vietnameseWord: 'ph√≤ng kh√°ch' },
      { englishWord: 'dining room', vietnameseWord: 'ph√≤ng ƒÉn' },
      { englishWord: 'garden', vietnameseWord: 'v∆∞·ªùn' },
      { englishWord: 'garage', vietnameseWord: 'nh√† ƒë·ªÉ xe' },
      { englishWord: 'balcony', vietnameseWord: 'ban c√¥ng' },
      { englishWord: 'stairs', vietnameseWord: 'c·∫ßu thang' },
      { englishWord: 'door', vietnameseWord: 'c·ª≠a' },
    ],
  },
  {
    title: 'Th·ªùi gian v√† ng√†y th√°ng',
    description: 'T·ª´ v·ª±ng v·ªÅ th·ªùi gian, ng√†y trong tu·∫ßn v√† th√°ng trong nƒÉm',
    pairs: [
      { englishWord: 'today', vietnameseWord: 'h√¥m nay' },
      { englishWord: 'tomorrow', vietnameseWord: 'ng√†y mai' },
      { englishWord: 'yesterday', vietnameseWord: 'h√¥m qua' },
      { englishWord: 'morning', vietnameseWord: 'bu·ªïi s√°ng' },
      { englishWord: 'afternoon', vietnameseWord: 'bu·ªïi chi·ªÅu' },
      { englishWord: 'evening', vietnameseWord: 'bu·ªïi t·ªëi' },
      { englishWord: 'night', vietnameseWord: 'ƒë√™m' },
      { englishWord: 'Monday', vietnameseWord: 'th·ª© hai' },
      { englishWord: 'Sunday', vietnameseWord: 'ch·ªß nh·∫≠t' },
      { englishWord: 'week', vietnameseWord: 'tu·∫ßn' },
    ],
  },
  {
    title: 'Ngh·ªÅ nghi·ªáp ph·ªï bi·∫øn',
    description: 'H·ªçc t·ª´ v·ª±ng v·ªÅ c√°c ngh·ªÅ nghi·ªáp th∆∞·ªùng g·∫∑p',
    pairs: [
      { englishWord: 'teacher', vietnameseWord: 'gi√°o vi√™n' },
      { englishWord: 'doctor', vietnameseWord: 'b√°c sƒ©' },
      { englishWord: 'nurse', vietnameseWord: 'y t√°' },
      { englishWord: 'engineer', vietnameseWord: 'k·ªπ s∆∞' },
      { englishWord: 'lawyer', vietnameseWord: 'lu·∫≠t s∆∞' },
      { englishWord: 'police', vietnameseWord: 'c·∫£nh s√°t' },
      { englishWord: 'farmer', vietnameseWord: 'n√¥ng d√¢n' },
      { englishWord: 'chef', vietnameseWord: 'ƒë·∫ßu b·∫øp' },
      { englishWord: 'driver', vietnameseWord: 't√†i x·∫ø' },
      { englishWord: 'student', vietnameseWord: 'h·ªçc sinh/sinh vi√™n' },
    ],
  },
  {
    title: 'Ph∆∞∆°ng ti·ªán giao th√¥ng',
    description: 'T·ª´ v·ª±ng v·ªÅ c√°c lo·∫°i ph∆∞∆°ng ti·ªán di chuy·ªÉn',
    pairs: [
      { englishWord: 'car', vietnameseWord: '√¥ t√¥' },
      { englishWord: 'bus', vietnameseWord: 'xe bu√Ωt' },
      { englishWord: 'train', vietnameseWord: 't√†u h·ªèa' },
      { englishWord: 'plane', vietnameseWord: 'm√°y bay' },
      { englishWord: 'bicycle', vietnameseWord: 'xe ƒë·∫°p' },
      { englishWord: 'motorcycle', vietnameseWord: 'xe m√°y' },
      { englishWord: 'boat', vietnameseWord: 'thuy·ªÅn' },
      { englishWord: 'ship', vietnameseWord: 't√†u th·ªßy' },
      { englishWord: 'taxi', vietnameseWord: 'taxi' },
      { englishWord: 'truck', vietnameseWord: 'xe t·∫£i' },
    ],
  },
  {
    title: 'C·∫£m x√∫c v√† t√≠nh c√°ch',
    description: 'H·ªçc t·ª´ v·ª±ng ƒë·ªÉ di·ªÖn t·∫£ c·∫£m x√∫c v√† t√≠nh c√°ch',
    pairs: [
      { englishWord: 'happy', vietnameseWord: 'vui v·∫ª/h·∫°nh ph√∫c' },
      { englishWord: 'sad', vietnameseWord: 'bu·ªìn' },
      { englishWord: 'angry', vietnameseWord: 'gi·∫≠n d·ªØ' },
      { englishWord: 'excited', vietnameseWord: 'ph·∫•n kh√≠ch' },
      { englishWord: 'tired', vietnameseWord: 'm·ªát m·ªèi' },
      { englishWord: 'hungry', vietnameseWord: 'ƒë√≥i' },
      { englishWord: 'thirsty', vietnameseWord: 'kh√°t' },
      { englishWord: 'kind', vietnameseWord: 't·ªët b·ª•ng' },
      { englishWord: 'smart', vietnameseWord: 'th√¥ng minh' },
      { englishWord: 'funny', vietnameseWord: 'h√†i h∆∞·ªõc' },
    ],
  }
];

// T·∫°o sample exercise results ƒë·ªÉ test
const sampleResults = [
  { score: 95, timeSpent: 120, attempts: 1 },
  { score: 88, timeSpent: 180, attempts: 2 },
  { score: 76, timeSpent: 240, attempts: 3 },
  { score: 92, timeSpent: 150, attempts: 1 },
  { score: 84, timeSpent: 200, attempts: 2 },
];

async function seedVocabularyExercises() {
  console.log('üå± Starting to seed vocabulary exercises...');

  try {
    // Ki·ªÉm tra xem c√≥ user n√†o trong database kh√¥ng
    const userCount = await prisma.user.count();
    if (userCount === 0) {
      console.log('‚ö†Ô∏è  No users found in database. Creating a test user...');
      
      // T·∫°o test user ƒë·ªÉ g√°n exercises
      const testUser = await prisma.user.create({
        data: {
          email: 'test@vocabulary.com',
          name: 'Test User',
          role: 'USER',
        },
      });
      
      console.log(`‚úÖ Created test user: ${testUser.email}`);
    }

    // L·∫•y user ƒë·∫ßu ti√™n ƒë·ªÉ g√°n exercises
    const firstUser = await prisma.user.findFirst();
    if (!firstUser) {
      throw new Error('No user found to assign exercises to');
    }

    console.log(`üë§ Using user: ${firstUser.email || firstUser.name || firstUser.id}`);

    // X√≥a exercises c≈© c·ªßa user n√†y ƒë·ªÉ tr√°nh duplicate
    await prisma.vocabularyExercise.deleteMany({
      where: { userId: firstUser.id }
    });

    console.log('üóëÔ∏è  Cleaned up existing vocabulary exercises');

    let totalCreated = 0;
    let totalResultsCreated = 0;

    // T·∫°o t·ª´ng exercise
    for (let i = 0; i < vocabularyExercisesData.length; i++) {
      const exerciseData = vocabularyExercisesData[i];
      
      console.log(`üìö Creating exercise: ${exerciseData.title}`);

      const exercise = await prisma.vocabularyExercise.create({
        data: {
          title: exerciseData.title,
          description: exerciseData.description,
          userId: firstUser.id,
          pairs: {
            create: exerciseData.pairs.map(pair => ({
              englishWord: pair.englishWord,
              vietnameseWord: pair.vietnameseWord,
            })),
          },
        },
        include: {
          pairs: true,
        },
      });

      totalCreated++;
      console.log(`‚úÖ Created exercise "${exercise.title}" with ${exercise.pairs.length} word pairs`);

      // T·∫°o sample results cho m·ªôt s·ªë exercises (ng·∫´u nhi√™n)
      if (Math.random() > 0.5) { // 50% chance c√≥ results
        const numResults = Math.floor(Math.random() * 3) + 1; // 1-3 results
        
        for (let j = 0; j < numResults; j++) {
          const resultData = sampleResults[Math.floor(Math.random() * sampleResults.length)];
          
          await prisma.exerciseResult.create({
            data: {
              userId: firstUser.id,
              exerciseId: exercise.id,
              score: resultData.score + Math.floor(Math.random() * 10) - 5, // Variation ¬±5
              timeSpent: resultData.timeSpent + Math.floor(Math.random() * 60) - 30, // Variation ¬±30s
              attempts: resultData.attempts,
              completedAt: new Date(Date.now() - Math.floor(Math.random() * 7 * 24 * 60 * 60 * 1000)), // Random trong 7 ng√†y qua
            },
          });
          
          totalResultsCreated++;
        }
        
        console.log(`üìä Added ${numResults} sample results for "${exercise.title}"`);
      }

      // Delay nh·ªè ƒë·ªÉ tr√°nh overwhelm database
      await new Promise(resolve => setTimeout(resolve, 100));
    }

    // Th·ªëng k√™ cu·ªëi c√πng
    const totalExercises = await prisma.vocabularyExercise.count();
    const totalPairs = await prisma.vocabularyPair.count();
    const totalResults = await prisma.exerciseResult.count();

    console.log('üéâ Vocabulary seeding completed!');
    console.log(`üìà Statistics:`);
    console.log(`   - Exercises created: ${totalCreated}`);
    console.log(`   - Sample results created: ${totalResultsCreated}`);
    console.log(`   - Total exercises in DB: ${totalExercises}`);
    console.log(`   - Total word pairs in DB: ${totalPairs}`);
    console.log(`   - Total results in DB: ${totalResults}`);

  } catch (error) {
    console.error('üí• Error during vocabulary seeding:', error);
    throw error;
  }
}

// Ch·∫°y seed function
if (require.main === module) {
  seedVocabularyExercises()
    .then(() => {
      console.log('‚ú® Vocabulary seeding process finished successfully!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• Vocabulary seeding process failed:', error);
      process.exit(1);
    })
    .finally(async () => {
      await prisma.$disconnect();
    });
}

export { seedVocabularyExercises };